Secure NGINX Reverse Proxy


# NGINX   TLS 1.2 / 1.3  

## How To Configure Nginx to use TLS 1.2 / 1.3 only 
================================================

How do I enable and configure TLS 1.2 and 1.3 only in Nginx web server?

 TLS is an acronym for Transport Layer Security. It is cryptographic
protocols designed to provide network communications security. TLS used
by websites and other apps such as IM (instant messaging), email, web
browsers, VoIP, and more to secure all communications between their
server and client. This page explains how to enable and configure Nginx
to use TLS 1.2 and 1.3 version only.


Nginx running on Linux/Unix with OpenSSL


How to configure and enable Nginx to use TLS 1.2 and 1.3
--------------------------------------------------------

1.  Open the terminal application
2.  Login to Nginx server using the ssh command
3.  Edit nginx.conf file or virtual domain config file
4.  Set TLS version by editing **ssl\_protocols TLSv1.2;**
5.  For TLS version 1.3 by add **ssl\_protocols TLSv1.3;**
6.  We can combine and only allow TLS 1.2 and 1.3 in Nginx by setting:
    **ssl\_protocols TLSv1.2 TLSv1.3;**
7.  Save and close the file
8.  Restart or reload the Nginx server.
9.  Test it.

### A note about our set up for TLS 1.2 or 1.3 only in Nginx web server

I tested the server configuration with the following components:

-   Nginx version 1.14.2
-   OpenSSL version 1.1.0

As a result, this config option works the following clients only:

-   Supports Firefox 27+
-   Android 4.4.2+
-   Chrome 31+
-   Edge, IE 11 on Windows 7 or above
-   Java 8u31
-   OpenSSL 1.0.1
-   Opera 20+
-   Safari 9+

In other words, an older client from Windows XP or an older version of
Android/Java won’t work.

#### A note about TLS 1.3

TLS 1.3 only supports Firefox 63+, Android 10.0+, Chrome 70+, Edge 75,
Java 11, OpenSSL 1.1.1, Opera 57, and Safari 12.1. Hence, I recommend
enabling both 1.2 and 1.3 support in Nginx.

### [How to check Nginx version](https://www.awareness_url.com/faq/unix-linux-bsd-display-nginx-version/)

Type:\
 `$ nginx -V $ nginx -v`

    nginx version: nginx/1.16.1

### How to check OpenSSL version

Run:\
 `$ openssl version`

    OpenSSL 1.1.1d  10 Sep 2019

How To enable TLS 1.2 only in Nginx web server
----------------------------------------------

Edit the nginx.conf:\
 `$ sudo vi /etc/nginx/nginx.conf`\
 OR edit the virtual host:\
 `$ sudo vi /etc/nginx/vhosts.d/awareness_url.com`\
 Update/append as follows:

Please note that the TLSv1.1 and TLSv1.2 parameters (1.1.13, 1.0.12)
work only when OpenSSL 1.0.1 or higher is used. The TLSv1.3 parameter
(1.13.0) works only when OpenSSL 1.1.1 built with TLSv1.3 support is
used.


``
 server {                                                                 
     listen 443 ssl http2;                                                
     server_name www.awareness_url.com awareness_url.com   
                                                                          
     # Path to certs                                                      
     ssl_certificate /etc/nginx/ssl/awareness_url.com.csr;                    
     ssl_certificate_key /etc/nginx/ssl/awareness_url.com.key;                
     ssl_session_timeout 1d;                                              
     ssl_session_cache shared:MySSL:10m;                                  
     ssl_session_tickets off;                                             
     ssl_dhparam /etc/nginx/ssl/awareness_url.com.dhparam.pem;             
                                                                          
                                                                          
     ssl_protocols TLSv1.2;                                               
     ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA25 
 6:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA- 
 CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256: 
 DHE-RSA-AES256-GCM-SHA384;                                               
     ssl_prefer_server_ciphers off;                                       
                                                                          
     # HSTS                                                               
     add_header Strict-Transport-Security "max-age=63072000" always;      
                                                                          
     # OCSP stapling                                                      
     ssl_stapling on;                                                     
     ssl_stapling_verify on;                                              
                                                                          
     # verify chain of trust of OCSP response using Root CA and Intermedi 
 ate certs                                                                
     ssl_trusted_certificate /etc/nginx/ssl/fullchain.pem;                
                                                                          
     # replace with the IP address of your resolver                       
     resolver 1.1.1.1;                                                    
                                                                          
     ## rest of config ##                                                 
 }                                                         
                
```                                                                      


Save and close the file.

How to Enable TLS 1.3 in Nginx
------------------------------

For both TLS version 1.2 and 1.3 use the following in nginx config file:

        ssl_protocols TLSv1.2 TLSv1.3;

Just enable TLS version 1.3 in nginx:

        ssl_protocols TLSv1.3;

Here is sample config for TLS 1.3 only:


```
 server {                                                                 
     listen 443 ssl http2;                                                
     listen [::]:443 ssl http2;                                           
     server www.awareness_url.com;                                        
                                                                          
     ssl_certificate /etc/nginx/ssl/fullchain.pem;                        
     ssl_certificate_key /etc/nginx/ssl/key.pem;                          
     ssl_session_timeout 1d;                                              
     ssl_session_cache shared:SharedNixCraftSSL:10m;                      
     ssl_session_tickets off;                                             
                                                                          
     # TLS 1.3 only                                                       
     ssl_protocols TLSv1.3;                                               
     ssl_prefer_server_ciphers off;                                       
                                                                          
     # HSTS (ngx_http_headers_module is required) (63072000 seconds)      
     add_header Strict-Transport-Security "max-age=63072000" always;      
                                                                          
     # OCSP stapling                                                      
     ssl_stapling on;                                                     
     ssl_stapling_verify on;                                              
                                                                          
     # verify chain of trust of OCSP response using Root CA and Intermedi 
 ate certs                                                                
     ssl_trusted_certificate /etc/nginx/ssl/fullchain.pem;                
                                                                          
     # replace with the IP address of your resolver                       
     resolver 8.8.8.8;                                                    
 }
                                                                         
 ```                                                                      



### Reload or restart the nginx

Now that server configured. It is time to test our nginx config server
for syntax errors:\
 `$ nginx -t`\
 Sample outputs:

    nginx: the configuration file /etc/nginx/nginx.conf syntax is ok
    nginx: configuration file /etc/nginx/nginx.conf test is successful

Reload or [restart the nginx
server]

 `$ sudo systemctl restart nginx ## OR ## $ sudo service nginx restart`

Test Nginx TLS 1.2 support
--------------------------

Run the curl command as follows (replace www.awareness_url.com domain with
your actual domain name):\
 `$ curl -I -v --tlsv1.2 --tls-max 1.2 https://www.awareness_url.com/`

### Test Nginx TLS 1.3 support

`$ curl -I -v --tlsv1.3 --tls-max 1.3 https://www.awareness_url.com/`


# NGINX Reverse Proxy


### Passing a Request to a Proxied Server

When NGINX proxies a request, it sends the request to a specified proxied server, fetches the response, and sends it back to the client. It is possible to proxy requests to an HTTP server (another NGINX server or any other server) or a non-HTTP server (which can run an application developed with a specific framework, such as PHP or Python) using a specified protocol. Supported protocols include FastCGI, uwsgi, SCGI, and memcached.

To pass a request to an HTTP proxied server, the proxy_pass directive is specified inside a location. For example:

+--------------------------------------------------------------------------+
| ``` {.ini style="font-family:monospace;"}                                |
| location /some/path/ {                                                   |
|   proxy_pass http://www.example.com/link/;                               |
|    }                                                                     |
| ```                                                                      |
+--------------------------------------------------------------------------+



This example configuration results in passing all requests processed in this location to the proxied server at the specified address. This address can be specified as a domain name or an IP address. The address may also include a port:

+--------------------------------------------------------------------------+
| ``` {.ini style="font-family:monospace;"}                                |
| location  ~ \.php {                                                      |
|   proxy_pass http://127.0.0.1:5001                                       |
|    }                                                                     |
| ```                                                                      |
+--------------------------------------------------------------------------+

# NGINX Proxy Config Template

Note: Replace SERVER_NAME with FQDN / URL of server
```
server {
   server_name  SERVER_NAME;
    listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/SERVER_NAME/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/SERVER_NAME/privkey.pem; # managed by Certbot
#    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
#    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot

  server_tokens off;
# more_set_headers 'Server: omar';
  proxy_hide_header Server;
 access_log /var/log/nginx/access.log;
 error_log /var/log/nginx/error.log;
 proxy_hide_header X-Powered-By;
 proxy_buffers 16 64k;
 proxy_buffer_size 128k;
 client_max_body_size 4M;
 gzip on;
 gzip_disable "msie6";
 gzip_vary on;
 gzip_proxied any;
 gzip_comp_level 6;
 gzip_http_version 1.1;
 gzip_min_length 256;
 gzip_types
 text/css
 text/javascript
 text/xml
 text/plain
 image/bmp
 image/gif
 image/jpeg
 image/jpg
  image/png
  image/svg+xml
  image/x-icon
  application/javascript
  application/json
  application/rss+xml
  application/vnd.ms-fontobject
  application/x-font-ttf
  application/x-javascript
  application/xml
  application/xml+rss;

# location ~^/app/assets {
# rewrite ^/app/assets http:// permanent;
# }


 location / {
 proxy_hide_header X-Powered-By;
# proxy_pass_request_headers      on;
# proxy_set_headers    Server: my_server;
#  proxy_hide_header Server;
 proxy_connect_timeout 360s;
 proxy_send_timeout 360s;
 proxy_read_timeout 360s;
 proxy_pass https://127.0.0.1:5001;
 proxy_set_header Host $host;
 proxy_set_header X-Forwarded-Host $host;
 proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
 proxy_set_header X-Forwarded-Proto $scheme;
 proxy_set_header X-Real-IP Secure_IP;
 proxy_next_upstream error timeout invalid_header http_500 http_502 http_503;
 proxy_redirect off;
 proxy_set_header X-Powered-By: Zisoft_Awarness;

 }
}
server {
    if ($host = SERVER_NAME) {
        return 301 https://$host$request_uri;
    } # managed by Certbot

 listen 80;
   server_name  SERVER_NAME;
    return 404; # managed by Certbot
}
```


